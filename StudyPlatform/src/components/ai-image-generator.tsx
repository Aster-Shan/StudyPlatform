"use client"

import { AlertCircle, Loader } from "lucide-react"
import React, { useState } from "react"
import { createImageGenerationPrompt, extractKeyConceptsFromText, generateImageFromText } from "../services/ai-service"

const AIImageGenerator = () => {
  const [text, setText] = useState("")
  const [image, setImage] = useState<string | null>(null)
  const [prompt, setPrompt] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // Generate image using AI
  const generateImageWithAI = async (prompt: string): Promise<string> => {
    try {
      return await generateImageFromText(prompt)
    } catch (error) {
      console.error("Error generating image:", error)
      throw error
    }
  }

  // Generate a prompt for the AI based on the extracted text
  const generatePrompt = async (text: string) => {
    try {
      // Extract key concepts from the text
      const concepts = await extractKeyConceptsFromText(text)
      // Create an optimized prompt
      const generatedPrompt = createImageGenerationPrompt(concepts)
      setPrompt(generatedPrompt)
    } catch (error) {
      console.error("Error generating prompt:", error)
      // Fallback to a simple prompt
      setPrompt(`Create an explanatory image that visualizes: ${text.substring(0, 500)}`)
    }
  }

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value)
  }

  const handleGenerateImage = async () => {
    setIsLoading(true)
    setError(null)
    setImage(null)

    try {
      if (!text) {
        setError("Please enter some text to generate an image.")
        return
      }

      await generatePrompt(text)

      const generatedImage = await generateImageWithAI(prompt)
      setImage(generatedImage)
    } catch (err: unknown) {
      setError(err.message || "Failed to generate image. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">AI Image Generator</h1>
      <div className="mb-4">
        <label htmlFor="text" className="block text-gray-700 text-sm font-bold mb-2">
          Enter Text:
        </label>
        <textarea
          id="text"
          className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          rows={4}
          placeholder="Enter text to generate an image"
          value={text}
          onChange={handleTextChange}
        ></textarea>
      </div>
      <div className="mb-4">
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={handleGenerateImage}
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <Loader className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            "Generate Image"
          )}
        </button>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline">{error}</span>
          <span className="absolute top-0 bottom-0 right-0 px-4 py-3">
            <AlertCircle className="h-6 w-6 fill-current text-red-500" />
          </span>
        </div>
      )}

      {image && (
        <div className="mb-4">
          <h2 className="text-lg font-bold mb-2">Generated Image:</h2>
          <img src={image || "/placeholder.svg"} alt="Generated by AI" className="max-w-full rounded-lg shadow-md" />
        </div>
      )}
    </div>
  )
}

export default AIImageGenerator

